package simpledb;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends AbstractDbIterator {
    private JoinPredicate joinPredicate;
    private DbIterator child1;
    private DbIterator child2;
    private Tuple currentTuple;

    /**
     * Constructor.  Accepts to children to join and the predicate
     * to join them on
     *
     * @param p The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.joinPredicate = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    /**
     * @see simpledb.TupleDesc#combine(TupleDesc, TupleDesc) for possible implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.combine(this.child1.getTupleDesc(), this.child2.getTupleDesc());
    }

    public void open()
        throws DbException, NoSuchElementException, TransactionAbortedException {
        this.child1.open();
        this.child2.open();
        if (!this.checkAndSetNextTuple(child1)) {
            throw new NoSuchElementException();
        }
    }

    public void close() {
        super.close();
        this.child1.close();
        this.child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.child1.rewind();
        this.child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no more tuples.
     * Logically, this is the next tuple in r1 cross r2 that satisfies the join
     * predicate.  There are many possible implementations; the simplest is a
     * nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of
     * Join are simply the concatenation of joining tuples from the left and
     * right relation. Therefore, if an equality predicate is used 
     * there will be two copies of the join attribute
     * in the results.  (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple readNext() throws TransactionAbortedException, DbException {
        do {
            Tuple t1 = this.currentTuple;
            while (this.child2.hasNext()) {
                Tuple t2 = this.child2.next();
                if (this.joinPredicate.filter(t1, t2)) {
                    return this.joinTuples(t1, t2);
                }
            }
            this.child2.rewind();
        } while (this.checkAndSetNextTuple(child1));

        return null;
    }

    /**
     * Creates a new tuple from two existing tuples.
     * @param t1 the first Tuple to join
     * @param t2 the second Tuple to join with the first
     * @return the joined Tuple
     */
    private Tuple joinTuples(Tuple t1, Tuple t2) {
        Tuple joinedTuple = new Tuple(this.getTupleDesc());

        for (int i = 0; i < t1.numFields(); i++) {
            joinedTuple.setField(i, t1.getField(i));
        }

        for (int j = 0; j < t2.numFields(); j++) {
            joinedTuple.setField(j + t1.numFields(), t2.getField(j));
        }

        return joinedTuple;
    }

    /**
     * We need to keep track of the current tuple in the left-side of the join loop in order
     * to continue from where we've left off from the last returned join tuple in readNext()
     *
     * @param child the iterator who's next tuple will be checked and set
     * @return true if the iterator has a next tuple
     * @throws TransactionAbortedException
     * @throws DbException
     */
    private boolean checkAndSetNextTuple(DbIterator child)
            throws TransactionAbortedException, DbException {
        if (child.hasNext()) {
            this.currentTuple = child.next();
            return true;
        } else {
            return false;
        }
    }
}
